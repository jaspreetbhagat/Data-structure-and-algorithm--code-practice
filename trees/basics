Terminology:-
1.Root
2.Parent
3.Child
4.sibling
5.descending
6.Ancestors
7.degree of the node.:[ no of direct childern it had]
8.Internal/External node.
9.Levels[starts from 1]
10.height[starts from 0]
11.forest[collection of treesl ]

-----------------------------BINARY TREE-----------------------------
 * degree of tree: 2

 every node can have  outmost two child{0,1,2}
for unlabbled tree:
number of binary trees : (2nCn)/n+1  <-------Catalan number
                       : [(2n)!/(2n-n)!n!]
for labbled tree:
number of binary tree: n!* Catalan number.


    ~~ height and nodes~~
    ----------------------

    # no of nodes if the heights are given:
        No of nodes:
        1.Min : h+1
        2.Max :  (2^h+1) - 1
    e.g:- h=1
        min = 1+1 = 2
        max = 2^2 -1 = 4-1 = 3

    #no of height if the nodes are given:
        height:
        1.min: log(n+1)-1
        2.max: n-1
    e.g:- n=3
        min = log(4)-1 = 1
        max = 3-1 = 2

    
--------strictÂ¬complete binary tree------
>>>>node can have either 2 or 0 children
    # no of nodes if the heights are given:
    --No of nodes:
    1.Min:2*n+1
    2.Max:(2*nCn/n+1)
    #no of height if the nodes are given:
    --no of heights:
    1.min: log(n+1)-1
    2.max:(h-1)/2


----------N-ary tree------
every node can have not mot than n degree;
 e.g: 3-ary tree degree{0,1,2,3}
strict n-ary tree: degree{0,3}.

>>>>>heights and nodes for m-ary tree:
     # no of nodes if the heights are given:
     no of nodes(n):
    1. min: n = (m)h+1
    2. max: n = m^(h+1)-1/m-1
    #no of height if the nodes are given:
    heights:
    1. min:log[n(m-1)+]-1
    2. max:(n-1)/m

---------------representation of binary tree------
array representation:
----------------------
[a,b,c,d,e];
index starts from 1 instead of 0--
if the element is at index:i 
left child: 2*i.
right cihld: 2*i + 1;
linked   representation:
---------------------------
dynamically represented.
struct node{
    struct node *lchild;
    int data;
    struct node *rchild;
};

if no of nodes = n,then the nulls in the linked tree will be n+1;

-------------------------------------------------------------------
 ----------------full binary tree v/s complete binary tree------------

 FULL binary tree:
 binary tree of height 'h' having maximum number of nodes is a full binary tree.
 * e.g: - if h = 2:- then the maximum nodes should be 7(2^(2+1)-1);

 Complete binary tree:
 if the tree is represented in an array then there should not be any gap between any number.
 a complete binary of height h will be a full binary tree upto h-1 height.

  ------------strict binary tree v/s complete binary tree------------
degree of strict binary tree: {0,2}.

------------------------------------------------------------------
                      TREE TREAVERSALS
    *preorder.:- visit(node),preorder(left subtree),preorder(right subtree)
    *inorder. :- inorder(left),visit(node),inorder(right).
    *postorder. :- postorder(left),postorder(right),visit(node)
    *levelorder. :- level by level.


------------------------creating a binary tree----------------------
  